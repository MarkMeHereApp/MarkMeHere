generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("NON_POOLING_DATABASE_URL") // uses a direct connection
}

model User {
  id               String    @id @default(cuid())
  role             String    @db.VarChar(10)
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  dateCreated      DateTime? @default(now())
  selectedCourseId String?   @db.VarChar(255)
  //courseMembers     CourseMember[]  
  accounts         Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lecture {
  id                String            @id @default(cuid())
  course            Course            @relation(fields: [courseId], references: [id])
  courseId          String
  lectureDate       DateTime
  attendanceEntries AttendanceEntry[]
  qrCodes           qrcode[]

  @@unique([courseId, lectureDate])
}

model AttendanceEntry {
  id             String       @id @default(cuid())
  lecture        Lecture      @relation(fields: [lectureId], references: [id])
  lectureId      String
  courseMemberId String
  courseMember   CourseMember @relation(fields: [courseMemberId], references: [id])
  checkInDate    DateTime     @default(now())
  status         String       @default("present")
}

model Course {
  id          String         @id @default(cuid())
  courseCode  String         @unique @db.VarChar(255)
  name        String         @db.VarChar(255)
  lmsType     String
  lmsId       String?
  dateCreated DateTime       @default(now())
  StartDate   DateTime?
  EndDate     DateTime?
  lectures    Lecture[]
  qrCodes     qrcode[]
  enrollments CourseMember[]

  @@unique([lmsType, lmsId])
}

model CourseMember {
  id                String            @id @default(cuid())
  lmsId             String? // We need this when registering a student     
  email             String
  name              String            @db.VarChar(255) // Right now optional
  courseId          String
  course            Course            @relation(fields: [courseId], references: [id])
  //user              User              @relation(fields: [email], references: [email]) // For now we don't need to focus on this 
  dateEnrolled      DateTime          @default(now())
  role              String            @default("student")
  attendanceEntries AttendanceEntry[]

  @@unique([email, courseId])
}

model qrcode {
  id        String   @id @default(cuid())
  lectureId String
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  code      String   @unique // More work to do to make this code truly unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model AttendanceToken {
  id        String   @id @default(cuid())
  token     String
  lectureId String
  createdAt DateTime @default(now())

  // We could implement a system where these are auto deleted after expiration (e.g 10 mins)
  // expiresAt DateTime 
}


model AuthProviderCredentials{

  id        String   @id @default(cuid())
  enabled  Boolean  @default(true)
  provider  String    @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  String
  clientSecret String
  issuer  String?
  authorizationUrl String?
  


}