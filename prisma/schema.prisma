generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String    @id @default(cuid())
  optionalId       String?    @db.VarChar(255)
  role             String    @db.VarChar(10)
  name             String?    @db.VarChar(255)
  email            String    @db.VarChar(255) @unique
  image            String?    @db.VarChar(255)
  dateCreated      DateTime? @default(now())
  selectedCourseId String?   @db.VarChar(255)
  //courseMembers     CourseMember[]  
  accounts         Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.VarChar(255)
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text    //can this be varchar 255?
  access_token      String? @db.Text    //can this be varchar 255?
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @db.VarChar(255) @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lecture {
  id                          String                        @id @default(cuid())
  course                      Course                        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId                    String                        @db.VarChar(255)
  lectureDate                 DateTime
  attendanceEntries           AttendanceEntry[]
  qrCodes                     qrcode[]
  professorLectureGeolocation ProfessorLectureGeolocation[]

  @@unique([courseId, lectureDate])
}

model AttendanceEntry {
  id             String       @id @default(cuid())
  lecture        Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId      String       @db.VarChar(255)
  courseMemberId String       @db.VarChar(255)
  courseMember   CourseMember @relation(fields: [courseMemberId], references: [id], onDelete: Cascade)
  dateMarked     DateTime     @default(now())
  status         String       @db.VarChar(255)
}

model Course {
  id          String         @id @default(cuid())
  courseCode  String         @unique @db.VarChar(255)
  name        String         @db.VarChar(255)
  lmsType     String         @db.VarChar(255)
  lmsId       String?        @db.VarChar(255)
  dateCreated DateTime       @default(now())
  StartDate   DateTime?
  EndDate     DateTime?
  lectures    Lecture[]
  qrCodes     qrcode[]
  enrollments CourseMember[]

  @@unique([lmsType, lmsId])
}

model CourseMember {
  id                          String                        @id @default(cuid())
  optionalId                  String?                       @db.VarChar(255)
  lmsId                       String?                       @db.VarChar(255)
  email                       String                        @db.VarChar(255)                  
  name                        String                        @db.VarChar(255) // Right now optional
  courseId                    String                        @db.VarChar(255)                
  course                      Course                        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  //user              User              @relation(fields: [email], references: [email]) // For now we don't need to focus on this 
  dateEnrolled                DateTime                      @default(now())
  role                        String                        @db.VarChar(255)
  attendanceEntries           AttendanceEntry[]
  professorLectureGeolocation ProfessorLectureGeolocation[]

  @@unique([email, lmsId])
  @@unique([email, optionalId])
  @@unique([email, courseId])

}

model qrcode {
  id                            String                       @id @default(cuid())
  lectureId                     String
  lecture                       Lecture                      @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  courseId                      String
  course                        Course                       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  code                          String                       @unique // More work to do to make this code truly unique
  ProfessorLectureGeolocationId String?
  ProfessorLectureGeolocation   ProfessorLectureGeolocation? @relation(fields: [ProfessorLectureGeolocationId], references: [id], onDelete: Cascade)
  createdAt                     DateTime                     @default(now())
  expiresAt                     DateTime
}

model AttendanceToken {
  id                            String                       @id @default(cuid())
  token                         String
  lectureId                     String
  createdAt                     DateTime                     @default(now())
  ProfessorLectureGeolocationId String?
  ProfessorLectureGeolocation   ProfessorLectureGeolocation? @relation(fields: [ProfessorLectureGeolocationId], references: [id], onDelete: Cascade)
  attendanceStudentLatitude     Float?
  attendanceStudentLongtitude   Float?

  // We could implement a system where these are auto deleted after expiration (e.g 10 mins)
  // expiresAt DateTime 
}

model AuthProviderCredentials {
  id                                String   @id @default(cuid())
  enabled                           Boolean  @default(true)
  key                               String   @db.VarChar(50) @unique
  displayName                       String   @db.VarChar(255) @unique
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  clientId                          String    @db.VarChar(512)
  clientSecret                      String    @db.VarChar(512)
  allowDangerousEmailAccountLinking Boolean
  issuer                            String?   @db.VarChar(512)
  tenantId                          String?   @db.VarChar(512)
  authorizationUrl                  String?   @db.VarChar(512)
}

model ProfessorLectureGeolocation {
  id               String            @id @default(cuid())
  lectureId        String
  lecture          Lecture           @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  courseMemberId   String
  courseMember     CourseMember      @relation(fields: [courseMemberId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  lectureLatitude  Float
  lectureLongitude Float
  qrCodes          qrcode[]
  attendanceTokens AttendanceToken[]
}

model GlobalSiteSettings {
  id                String        @id
  lightTheme        String        @db.VarChar(255)
  darkTheme         String        @db.VarChar(255)
  googleMapsApiKey  String        @db.VarChar(255)
  allowModeratorsToUseGoogleMaps Boolean 
  allowUsersToUseGoogleMaps Boolean 
}