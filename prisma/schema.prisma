generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("NON_POOLING_DATABASE_URL") // uses a direct connection
}


model User {
  id                String            @id @default(cuid())
  email             String            @unique
  firstName         String            @db.VarChar(255)
  lastName          String            @db.VarChar(255)
  dateCreated       DateTime?         @default(now())
  password          String?           @db.VarChar(255)
  //courseMembers     CourseMember[]  
}

model Lecture {
  id                String            @id @default(cuid())
  course            Course            @relation(fields: [courseId], references: [id])
  courseId          String            @unique
  lectureDate       DateTime          
  attendanceEntries AttendanceEntry[]
}

model AttendanceEntry {
  id          String           @id @default(cuid())
  lecture     Lecture          @relation(fields: [lectureId], references: [id])
  lectureId   String           
  studentId   String
  student     CourseMember     @relation(fields: [studentId], references: [id])
  checkInDate DateTime         @default(now())
  status      String           @default("present") 
}

model Course {
  id          String                    @id @default(cuid())
  courseLabel String                    @unique @db.VarChar(255)
  name        String                    @db.VarChar(255)
  lmsId       String?                   @unique
  dateCreated DateTime                  @default(now())
  StartDate   DateTime?
  EndDate     DateTime?
  lectures    Lecture[]
  enrollments CourseMember[]
}

model CourseMember {
  id                String              @id @default(cuid())
  lmsId             String?                                // We need this when registering a student     
  email             String
  name              String             @db.VarChar(255)   // Right now optional
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id])
  //user              User              @relation(fields: [email], references: [email]) // For now we don't need to focus on this 
  role              String              @default("student") 
  attendanceEntries AttendanceEntry[] 
}

model qrcode {
  id         String           @id @default(cuid())
  //lectureId  String
  //lecture    Lecture          @relation(fields: [lectureId], references: [id])
  code       String
  createdAt  DateTime         @default(now())
}